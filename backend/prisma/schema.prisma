// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AcceptanceStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Users {
  id                Int           @id @default(autoincrement())
  email             String        @unique
  username          String        @db.Text
  password          String        @db.Text
  phone             String?       @db.Text
  created_at        DateTime      @default(now()) @db.Timestamptz
  updated_at        DateTime      @updatedAt @db.Timestamptz
  events            Events[]
  attendance        Attendance[]
  invitations       Invitations[]
  contacts_user     Contacts[]    @relation("contact_user")
  contacts_contact  Contacts[]    @relation("contact_contact")
}

model Events {
  id          Int           @id @default(autoincrement())
  hosted_by   Int           @db.Integer
  user        Users         @relation(fields: [hosted_by], references: [id], onDelete: Cascade)
  title       String        @db.Text
  start       DateTime      @db.Timestamptz
  end         DateTime      @db.Timestamptz
  venue       String        @db.Text
  details     String?       @db.Text
  qr_uuid     String?       @db.Text
  created_at  DateTime      @default(now()) @db.Timestamptz
  updated_at  DateTime      @updatedAt @db.Timestamptz
  attendance  Attendance[]
  invitations Invitations[]
}

model Attendance {
  id            Int        @id @default(autoincrement())
  user_id       Int        @db.Integer
  user          Users      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  event_id      Int        @db.Integer
  event         Events     @relation(fields: [event_id], references: [id], onDelete: Cascade)
  attend_time   DateTime?  @db.Timestamptz
  late_reason   String?    @db.Text
  absent_reason String?    @db.Text
  created_at    DateTime   @default(now()) @db.Timestamptz
  updated_at    DateTime   @updatedAt @db.Timestamptz
}

model Invitations {
  id          Int      @id @default(autoincrement())
  event_id    Int      @db.Integer
  event       Events   @relation(fields: [event_id], references: [id], onDelete: Cascade)
  user_id     Int      @db.Integer
  user        Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  status      AcceptanceStatus @default(PENDING)
  created_at  DateTime @default(now()) @db.Timestamptz
  updated_at  DateTime @updatedAt @db.Timestamptz
}

model Contacts {
  id          Int      @id @default(autoincrement())
  user_id     Int      @db.Integer
  user        Users    @relation("contact_user", fields: [user_id], references: [id], onDelete: Cascade)
  contact_id  Int      @db.Integer
  contact     Users    @relation("contact_contact", fields: [contact_id], references: [id], onDelete: Cascade)
  created_at  DateTime @default(now()) @db.Timestamptz
  updated_at  DateTime @updatedAt @db.Timestamptz
}